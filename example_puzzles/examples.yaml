---
:section: Sudoku Solver
:content:
- :comment: >
    The program `solve_sudoku` reads sudoku puzzles from files
    (or stdin, if no filenames is given) and solves them by
    constraint resolution. If constraint resolution is not enough
    to solve the puzzle, it will resort to a trial and error
    approach. The exit code will indicate if all parsed puzzles
    was completely solved or not.

    Each resolution step and the current state of the puzzle can
    be written to stdout for diagnostic purposes. It is also
    possible to abort after a given number of steps if a complete
    resolution is not desired, which would be the case if you only
    want a couple of clues.

    Note that the step output and abort functionality is not
    available when the puzzle is solved by trial and error.

    The default behavior is resolve all given puzzles (with trial
    and error, if neccessary) and indicate by exit status whether
    all puzzles where completely resolved. No output is given
    unless explicitly asked for.

- :example: Printing the parsed puzzles, `-i`.
  :comment: >
    The parser will interpret digits (0-9) as values in the puzzle
    and disregard anything else. The option `-i` will output the
    parsed puzzle before it solves it.
  :input_files:
  - example_puzzles/simple
  :argv:
  - -i
  :expected_exit_code: 0
  :expected_output: |
    9   6|8 1 3|5 4  
    2   1|  4 5|  6 3
      4  |     |     
    -----+-----+-----
         |6 2  |    9
        9|     |2    
    7    |  3 4|     
    -----+-----+-----
         |     |  9  
    5 9  |3 6  |1   4
      2 7|4 5 9|3   6
- :example: "Parsing several puzzles at the same time"
  :input_files:
  - example_puzzles/simple
  - example_puzzles/medium
  :argv:
  - -i
  :expected_exit_code: 0
  :expected_output: |
    9   6|8 1 3|5 4  
    2   1|  4 5|  6 3
      4  |     |     
    -----+-----+-----
         |6 2  |    9
        9|     |2    
    7    |  3 4|     
    -----+-----+-----
         |     |  9  
    5 9  |3 6  |1   4
      2 7|4 5 9|3   6

         |3   1|     
        9|     |     
      8  |     |  3  
    -----+-----+-----
         |    4|9 8  
        7|1 2  |5    
    2    |  9  |1 7  
    -----+-----+-----
      5  |  1 2|     
      9  |    7|     
    3    |4   5|    8
- :example: Parsing 4x4 puzzles, `-4`, `-4x4`.
  :input_files:
  - example_puzzles/4x4
  :argv:
  - -i
  - -4
  :expected_exit_code: 0
  :expected_output: "   |4  \n1  |   \n---+---\n   |  3\n  1|   \n\n"

- :example: Printing the output, `-o`.
  :input_files:
  - example_puzzles/simple
  :argv:
  - -o
  :expected_exit_code: 0
  :expected_output: |
    9 7 6|8 1 3|5 4 2
    2 8 1|7 4 5|9 6 3
    3 4 5|2 9 6|8 1 7
    -----+-----+-----
    8 5 3|6 2 1|4 7 9
    4 6 9|5 7 8|2 3 1
    7 1 2|9 3 4|6 5 8
    -----+-----+-----
    6 3 4|1 8 2|7 9 5
    5 9 8|3 6 7|1 2 4
    1 2 7|4 5 9|3 8 6
- :example: Printing the resolution steps, `-s`.
  :input_files:
  - example_puzzles/simple
  :argv:
  - -o -s
  :expected_exit_code: 0
  :expected_output: |
    [1,2]=7
    [8,3]=8
    [9,8]=8
    [1,9]=2
    [2,2]=8
    [9,1]=1
    [7,7]=7
    [3,1]=3
    [7,5]=8
    [7,9]=5
    [2,7]=9
    [8,8]=2
    [3,3]=5
    [5,5]=7
    [2,4]=7
    [3,7]=8
    [8,6]=7
    [6,3]=2
    [3,5]=9
    [4,7]=4
    [6,7]=6
    [3,4]=2
    [4,1]=8
    [4,3]=3
    [3,6]=6
    [7,4]=1
    [4,6]=1
    [7,3]=4
    [7,6]=2
    [5,4]=5
    [4,2]=5
    [5,6]=8
    [7,1]=6
    [6,4]=9
    [4,8]=7
    [6,2]=1
    [5,9]=1
    [7,2]=3
    [5,1]=4
    [3,8]=1
    [6,8]=5
    [6,9]=8
    [5,2]=6
    [5,8]=3
    [3,9]=7
    9 7 6|8 1 3|5 4 2
    2 8 1|7 4 5|9 6 3
    3 4 5|2 9 6|8 1 7
    -----+-----+-----
    8 5 3|6 2 1|4 7 9
    4 6 9|5 7 8|2 3 1
    7 1 2|9 3 4|6 5 8
    -----+-----+-----
    6 3 4|1 8 2|7 9 5
    5 9 8|3 6 7|1 2 4
    1 2 7|4 5 9|3 8 6

- :example: Printing the entire puzzle for each resolution step, `-p`.
  :input_files:
  - example_puzzles/4x4
  :argv:
  - --4x4 -p
  :expected_exit_code: 0
  #
  # this output looks really bad since YAML doesn't support ASCII art that
  # starts with spaces, which is the case of certain puzzles.
  #
  :expected_output: ! "   |4  \n1  |  2\n---+---\n   |  3\n  1|   \n\n   |4  \n1  |  2\n---+---\n
    \  |  3\n  1|2  \n\n   |4  \n1  |3 2\n---+---\n   |  3\n  1|2  \n\n   |4 1\n1  |3
      2\n---+---\n   |  3\n  1|2  \n\n   |4 1\n1  |3 2\n---+---\n   |  3\n  1|2 4\n\n
        \  |4 1\n1  |3 2\n---+---\n   |1 3\n  1|2 4\n\n   |4 1\n1 4|3 2\n---+---\n   |1
          3\n  1|2 4\n\n   |4 1\n1 4|3 2\n---+---\n   |1 3\n3 1|2 4\n\n   |4 1\n1 4|3 2\n---+---\n
            \ 2|1 3\n3 1|2 4\n\n2  |4 1\n1 4|3 2\n---+---\n  2|1 3\n3 1|2 4\n\n2  |4 1\n1 4|3
              2\n---+---\n4 2|1 3\n3 1|2 4\n\n2 3|4 1\n1 4|3 2\n---+---\n4 2|1 3\n3 1|2 4\n\n"

- :example: Use constraint resolution only, `-r`.
  :comment: >
    You can avoid the trial and error functionality. Note though that this might not
    lead to a completely solved puzzle, which would imply a failure return code.

    The input and incomplete result is demonstrated below.

  :input_files:
  - example_puzzles/medium
  :argv:
  - -i -o -r
  :expected_exit_code: 256
  #
  # this puzzle looks really bad since YAML doesn't support ASCII art that
  # starts with spaces, which is the case of certain puzzles.
  #
  :expected_output: ! "     |3   1|     \n    9|     |     \n  8  |     |  3  \n-----+-----+-----\n
    \    |    4|9 8  \n    7|1 2  |5    \n2    |  9  |1 7  \n-----+-----+-----\n  5
      \ |  1 2|     \n  9  |    7|     \n3    |4   5|    8\n\n  2  |3 8 1|  5 9\n  3 9|7
        5 6|8 2  \n  8 5|2 4 9|  3  \n-----+-----+-----\n5 1 3|6 7 4|9 8 2\n9   7|1 2 8|5
          \  3\n2   8|5 9 3|1 7  \n-----+-----+-----\n8 5  |9 1 2|3   7\n  9 2|8 3 7|  1 5\n3
            7 1|4 6 5|2 9 8\n\n"

- :example: ""
  :input_files:
  - example_puzzles/hard
  :argv:
  - -i -o -r
  :expected_exit_code: 256
  #
  # this puzzle looks really bad since YAML doesn't support ASCII art that
  # starts with spaces, which is the case of certain puzzles.
  #
  :expected_output: ! "     |2    |  6 3\n3    |    5|4   1\n    1|    3|9 8  \n-----+-----+-----\n
    \    |     |  9  \n     |5 3 8|     \n  3  |     |     \n-----+-----+-----\n  2
      6|3    |5    \n5   3|7    |    8\n4 7  |    1|     \n\n     |2 1  |7 6 3\n3   7|
        \   5|4 2 1\n2   1|  7 3|9 8 5\n-----+-----+-----\n     |     |3 9  \n     |5 3
          8|     \n  3  |     |8 5  \n-----+-----+-----\n  2 6|3    |5    \n5   3|7    |    8\n4
            7  |  5 1|  3  \n\n"


- :example: Abort after a given number of steps, `-c NUM`, `--clues NUM`.
  :comment: >
      If you don't want the entire puzzle solved, but just a couple of clues on
      how to get forward, you can abort the resolution with `-c`, and print each
      step with  `-s`.
  :input_files:
  - example_puzzles/simple
  :argv:
  - "-s"
  - "-c 3"
  :expected_exit_code: 0
  :expected_output: |
    [1,2]=7
    [8,3]=8
    [9,8]=8
